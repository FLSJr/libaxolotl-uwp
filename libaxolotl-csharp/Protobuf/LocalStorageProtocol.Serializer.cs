// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Textsecure
{
    
    public partial class SessionStructure
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SessionStructure Deserialize(Stream stream)
        {
            SessionStructure instance = new SessionStructure();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SessionStructure DeserializeLengthDelimited(Stream stream)
        {
            SessionStructure instance = new SessionStructure();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SessionStructure DeserializeLength(Stream stream, int length)
        {
            SessionStructure instance = new SessionStructure();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SessionStructure Deserialize(byte[] buffer)
        {
            SessionStructure instance = new SessionStructure();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Textsecure.SessionStructure Deserialize(byte[] buffer, Textsecure.SessionStructure instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Textsecure.SessionStructure Deserialize(Stream stream, Textsecure.SessionStructure instance)
        {
            if (instance.ReceiverChains == null)
                instance.ReceiverChains = new List<Textsecure.SessionStructure.Chain>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SessionVersion = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.LocalIdentityPublic = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.RemoteIdentityPublic = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.RootKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.PreviousCounter = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        if (instance.SenderChain == null)
                            instance.SenderChain = Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream, instance.SenderChain);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        // repeated
                        instance.ReceiverChains.Add(Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.PendingKeyExchangeField == null)
                            instance.PendingKeyExchangeField = Textsecure.SessionStructure.PendingKeyExchange.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.PendingKeyExchange.DeserializeLengthDelimited(stream, instance.PendingKeyExchangeField);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.PendingPreKeyField == null)
                            instance.PendingPreKeyField = Textsecure.SessionStructure.PendingPreKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.PendingPreKey.DeserializeLengthDelimited(stream, instance.PendingPreKeyField);
                        continue;
                    // Field 10 Varint
                    case 80:
                        instance.RemoteRegistrationId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.LocalRegistrationId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 12 Varint
                    case 96:
                        instance.NeedsRefresh = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        instance.AliceBaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SessionStructure DeserializeLengthDelimited(Stream stream, Textsecure.SessionStructure instance)
        {
            if (instance.ReceiverChains == null)
                instance.ReceiverChains = new List<Textsecure.SessionStructure.Chain>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SessionVersion = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.LocalIdentityPublic = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.RemoteIdentityPublic = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.RootKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.PreviousCounter = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        if (instance.SenderChain == null)
                            instance.SenderChain = Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream, instance.SenderChain);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        // repeated
                        instance.ReceiverChains.Add(Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.PendingKeyExchangeField == null)
                            instance.PendingKeyExchangeField = Textsecure.SessionStructure.PendingKeyExchange.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.PendingKeyExchange.DeserializeLengthDelimited(stream, instance.PendingKeyExchangeField);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.PendingPreKeyField == null)
                            instance.PendingPreKeyField = Textsecure.SessionStructure.PendingPreKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.PendingPreKey.DeserializeLengthDelimited(stream, instance.PendingPreKeyField);
                        continue;
                    // Field 10 Varint
                    case 80:
                        instance.RemoteRegistrationId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.LocalRegistrationId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 12 Varint
                    case 96:
                        instance.NeedsRefresh = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        instance.AliceBaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SessionStructure DeserializeLength(Stream stream, int length, Textsecure.SessionStructure instance)
        {
            if (instance.ReceiverChains == null)
                instance.ReceiverChains = new List<Textsecure.SessionStructure.Chain>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SessionVersion = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.LocalIdentityPublic = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.RemoteIdentityPublic = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.RootKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.PreviousCounter = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        if (instance.SenderChain == null)
                            instance.SenderChain = Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream, instance.SenderChain);
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        // repeated
                        instance.ReceiverChains.Add(Textsecure.SessionStructure.Chain.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.PendingKeyExchangeField == null)
                            instance.PendingKeyExchangeField = Textsecure.SessionStructure.PendingKeyExchange.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.PendingKeyExchange.DeserializeLengthDelimited(stream, instance.PendingKeyExchangeField);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.PendingPreKeyField == null)
                            instance.PendingPreKeyField = Textsecure.SessionStructure.PendingPreKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.PendingPreKey.DeserializeLengthDelimited(stream, instance.PendingPreKeyField);
                        continue;
                    // Field 10 Varint
                    case 80:
                        instance.RemoteRegistrationId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.LocalRegistrationId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 12 Varint
                    case 96:
                        instance.NeedsRefresh = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        instance.AliceBaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SessionStructure instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SessionVersion);
            if (instance.LocalIdentityPublic != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.LocalIdentityPublic);
            }
            if (instance.RemoteIdentityPublic != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.RemoteIdentityPublic);
            }
            if (instance.RootKey != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.RootKey);
            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PreviousCounter);
            if (instance.SenderChain != null)
            {
                // Key for field: 6, LengthDelimited
                stream.WriteByte(50);
                ﻿msField.SetLength(0);
                Textsecure.SessionStructure.Chain.Serialize(msField, instance.SenderChain);
                // Length delimited byte array
                uint length6 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length6);
                //stream.Write(msField.GetBuffer(), 0, (int)length6);
				msField.CopyTo(stream, (int)length6);

            }
            if (instance.ReceiverChains != null)
            {
                foreach (var i7 in instance.ReceiverChains)
                {
                    // Key for field: 7, LengthDelimited
                    stream.WriteByte(58);
                    ﻿msField.SetLength(0);
                    Textsecure.SessionStructure.Chain.Serialize(msField, i7);
                    // Length delimited byte array
                    uint length7 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length7);
					//stream.Write(msField.GetBuffer(), 0, (int)length7);
					msField.CopyTo(stream, (int)length7);

				}
            }
            if (instance.PendingKeyExchangeField != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                ﻿msField.SetLength(0);
                Textsecure.SessionStructure.PendingKeyExchange.Serialize(msField, instance.PendingKeyExchangeField);
                // Length delimited byte array
                uint length8 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                //stream.Write(msField.GetBuffer(), 0, (int)length8);
				msField.CopyTo(stream, (int)length8);

			}
            if (instance.PendingPreKeyField != null)
            {
                // Key for field: 9, LengthDelimited
                stream.WriteByte(74);
                ﻿msField.SetLength(0);
                Textsecure.SessionStructure.PendingPreKey.Serialize(msField, instance.PendingPreKeyField);
                // Length delimited byte array
                uint length9 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length9);
                //stream.Write(msField.GetBuffer(), 0, (int)length9);
				msField.CopyTo(stream, (int)length9);

			}
            // Key for field: 10, Varint
            stream.WriteByte(80);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.RemoteRegistrationId);
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.LocalRegistrationId);
            // Key for field: 12, Varint
            stream.WriteByte(96);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.NeedsRefresh);
            if (instance.AliceBaseKey != null)
            {
                // Key for field: 13, LengthDelimited
                stream.WriteByte(106);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.AliceBaseKey);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SessionStructure instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SessionStructure instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        
        public partial class Chain
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Chain Deserialize(Stream stream)
            {
                Chain instance = new Chain();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Chain DeserializeLengthDelimited(Stream stream)
            {
                Chain instance = new Chain();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Chain DeserializeLength(Stream stream, int length)
            {
                Chain instance = new Chain();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static Chain Deserialize(byte[] buffer)
            {
                Chain instance = new Chain();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Textsecure.SessionStructure.Chain Deserialize(byte[] buffer, Textsecure.SessionStructure.Chain instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.Chain Deserialize(Stream stream, Textsecure.SessionStructure.Chain instance)
            {
                if (instance.MessageKeys == null)
                    instance.MessageKeys = new List<Textsecure.SessionStructure.Chain.MessageKey>();
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.SenderRatchetKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.SenderRatchetKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            if (instance.ChainKeyField == null)
                                instance.ChainKeyField = Textsecure.SessionStructure.Chain.ChainKey.DeserializeLengthDelimited(stream);
                            else
                                Textsecure.SessionStructure.Chain.ChainKey.DeserializeLengthDelimited(stream, instance.ChainKeyField);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            // repeated
                            instance.MessageKeys.Add(Textsecure.SessionStructure.Chain.MessageKey.DeserializeLengthDelimited(stream));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.Chain DeserializeLengthDelimited(Stream stream, Textsecure.SessionStructure.Chain instance)
            {
                if (instance.MessageKeys == null)
                    instance.MessageKeys = new List<Textsecure.SessionStructure.Chain.MessageKey>();
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.SenderRatchetKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.SenderRatchetKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            if (instance.ChainKeyField == null)
                                instance.ChainKeyField = Textsecure.SessionStructure.Chain.ChainKey.DeserializeLengthDelimited(stream);
                            else
                                Textsecure.SessionStructure.Chain.ChainKey.DeserializeLengthDelimited(stream, instance.ChainKeyField);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            // repeated
                            instance.MessageKeys.Add(Textsecure.SessionStructure.Chain.MessageKey.DeserializeLengthDelimited(stream));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.Chain DeserializeLength(Stream stream, int length, Textsecure.SessionStructure.Chain instance)
            {
                if (instance.MessageKeys == null)
                    instance.MessageKeys = new List<Textsecure.SessionStructure.Chain.MessageKey>();
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.SenderRatchetKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.SenderRatchetKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            if (instance.ChainKeyField == null)
                                instance.ChainKeyField = Textsecure.SessionStructure.Chain.ChainKey.DeserializeLengthDelimited(stream);
                            else
                                Textsecure.SessionStructure.Chain.ChainKey.DeserializeLengthDelimited(stream, instance.ChainKeyField);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            // repeated
                            instance.MessageKeys.Add(Textsecure.SessionStructure.Chain.MessageKey.DeserializeLengthDelimited(stream));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, Chain instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                if (instance.SenderRatchetKey != null)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.SenderRatchetKey);
                }
                if (instance.SenderRatchetKeyPrivate != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.SenderRatchetKeyPrivate);
                }
                if (instance.ChainKeyField != null)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    Textsecure.SessionStructure.Chain.ChainKey.Serialize(msField, instance.ChainKeyField);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    //stream.Write(msField.GetBuffer(), 0, (int)length3);
					msField.CopyTo(stream, (int)length3);

				}
                if (instance.MessageKeys != null)
                {
                    foreach (var i4 in instance.MessageKeys)
                    {
                        // Key for field: 4, LengthDelimited
                        stream.WriteByte(34);
                        ﻿msField.SetLength(0);
                        Textsecure.SessionStructure.Chain.MessageKey.Serialize(msField, i4);
                        // Length delimited byte array
                        uint length4 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
						//stream.Write(msField.GetBuffer(), 0, (int)length4);
						msField.CopyTo(stream, (int)length4);

					}
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(Chain instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, Chain instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }

            
            public partial class ChainKey
            {
                /// <summary>Helper: create a new instance to deserializing into</summary>
                public static ChainKey Deserialize(Stream stream)
                {
                    ChainKey instance = new ChainKey();
                    Deserialize(stream, instance);
                    return instance;
                }

                /// <summary>Helper: create a new instance to deserializing into</summary>
                public static ChainKey DeserializeLengthDelimited(Stream stream)
                {
                    ChainKey instance = new ChainKey();
                    DeserializeLengthDelimited(stream, instance);
                    return instance;
                }

                /// <summary>Helper: create a new instance to deserializing into</summary>
                public static ChainKey DeserializeLength(Stream stream, int length)
                {
                    ChainKey instance = new ChainKey();
                    DeserializeLength(stream, length, instance);
                    return instance;
                }

                /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
                public static ChainKey Deserialize(byte[] buffer)
                {
                    ChainKey instance = new ChainKey();
                    using (var ms = new MemoryStream(buffer))
                        Deserialize(ms, instance);
                    return instance;
                }

                /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
                public static Textsecure.SessionStructure.Chain.ChainKey Deserialize(byte[] buffer, Textsecure.SessionStructure.Chain.ChainKey instance)
                {
                    using (var ms = new MemoryStream(buffer))
                        Deserialize(ms, instance);
                    return instance;
                }

                /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
                public static Textsecure.SessionStructure.Chain.ChainKey Deserialize(Stream stream, Textsecure.SessionStructure.Chain.ChainKey instance)
                {
                    while (true)
                    {
                        int keyByte = stream.ReadByte();
                        if (keyByte == -1)
                            break;
                        // Optimized reading of known fields with field ID < 16
                        switch (keyByte)
                        {
                            // Field 1 Varint
                            case 8:
                                instance.Index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                                continue;
                            // Field 2 LengthDelimited
                            case 18:
                                instance.Key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                        }

                        var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                        // Reading field ID > 16 and unknown field ID/wire type combinations
                        switch (key.Field)
                        {
                            case 0:
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                            default:
                                global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                                break;
                        }
                    }

                    return instance;
                }

                /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
                public static Textsecure.SessionStructure.Chain.ChainKey DeserializeLengthDelimited(Stream stream, Textsecure.SessionStructure.Chain.ChainKey instance)
                {
                    long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    limit += stream.Position;
                    while (true)
                    {
                        if (stream.Position >= limit)
                        {
                            if (stream.Position == limit)
                                break;
                            else
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                        }
                        int keyByte = stream.ReadByte();
                        if (keyByte == -1)
                            throw new System.IO.EndOfStreamException();
                        // Optimized reading of known fields with field ID < 16
                        switch (keyByte)
                        {
                            // Field 1 Varint
                            case 8:
                                instance.Index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                                continue;
                            // Field 2 LengthDelimited
                            case 18:
                                instance.Key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                        }

                        var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                        // Reading field ID > 16 and unknown field ID/wire type combinations
                        switch (key.Field)
                        {
                            case 0:
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                            default:
                                global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                                break;
                        }
                    }

                    return instance;
                }

                /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
                public static Textsecure.SessionStructure.Chain.ChainKey DeserializeLength(Stream stream, int length, Textsecure.SessionStructure.Chain.ChainKey instance)
                {
                    long limit = stream.Position + length;
                    while (true)
                    {
                        if (stream.Position >= limit)
                        {
                            if (stream.Position == limit)
                                break;
                            else
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                        }
                        int keyByte = stream.ReadByte();
                        if (keyByte == -1)
                            throw new System.IO.EndOfStreamException();
                        // Optimized reading of known fields with field ID < 16
                        switch (keyByte)
                        {
                            // Field 1 Varint
                            case 8:
                                instance.Index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                                continue;
                            // Field 2 LengthDelimited
                            case 18:
                                instance.Key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                        }

                        var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                        // Reading field ID > 16 and unknown field ID/wire type combinations
                        switch (key.Field)
                        {
                            case 0:
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                            default:
                                global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                                break;
                        }
                    }

                    return instance;
                }

                /// <summary>Serialize the instance into the stream</summary>
                public static void Serialize(Stream stream, ChainKey instance)
                {
                    var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                    // Key for field: 1, Varint
                    stream.WriteByte(8);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Index);
                    if (instance.Key != null)
                    {
                        // Key for field: 2, LengthDelimited
                        stream.WriteByte(18);
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Key);
                    }
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
                }

                /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
                public static byte[] SerializeToBytes(ChainKey instance)
                {
                    using (var ms = new MemoryStream())
                    {
                        Serialize(ms, instance);
                        return ms.ToArray();
                    }
                }
                /// <summary>Helper: Serialize with a varint length prefix</summary>
                public static void SerializeLengthDelimited(Stream stream, ChainKey instance)
                {
                    var data = SerializeToBytes(instance);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                    stream.Write(data, 0, data.Length);
                }
            }


            
            public partial class MessageKey
            {
                /// <summary>Helper: create a new instance to deserializing into</summary>
                public static MessageKey Deserialize(Stream stream)
                {
                    MessageKey instance = new MessageKey();
                    Deserialize(stream, instance);
                    return instance;
                }

                /// <summary>Helper: create a new instance to deserializing into</summary>
                public static MessageKey DeserializeLengthDelimited(Stream stream)
                {
                    MessageKey instance = new MessageKey();
                    DeserializeLengthDelimited(stream, instance);
                    return instance;
                }

                /// <summary>Helper: create a new instance to deserializing into</summary>
                public static MessageKey DeserializeLength(Stream stream, int length)
                {
                    MessageKey instance = new MessageKey();
                    DeserializeLength(stream, length, instance);
                    return instance;
                }

                /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
                public static MessageKey Deserialize(byte[] buffer)
                {
                    MessageKey instance = new MessageKey();
                    using (var ms = new MemoryStream(buffer))
                        Deserialize(ms, instance);
                    return instance;
                }

                /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
                public static Textsecure.SessionStructure.Chain.MessageKey Deserialize(byte[] buffer, Textsecure.SessionStructure.Chain.MessageKey instance)
                {
                    using (var ms = new MemoryStream(buffer))
                        Deserialize(ms, instance);
                    return instance;
                }

                /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
                public static Textsecure.SessionStructure.Chain.MessageKey Deserialize(Stream stream, Textsecure.SessionStructure.Chain.MessageKey instance)
                {
                    while (true)
                    {
                        int keyByte = stream.ReadByte();
                        if (keyByte == -1)
                            break;
                        // Optimized reading of known fields with field ID < 16
                        switch (keyByte)
                        {
                            // Field 1 Varint
                            case 8:
                                instance.Index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                                continue;
                            // Field 2 LengthDelimited
                            case 18:
                                instance.CipherKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                            // Field 3 LengthDelimited
                            case 26:
                                instance.MacKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                            // Field 4 LengthDelimited
                            case 34:
                                instance.Iv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                        }

                        var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                        // Reading field ID > 16 and unknown field ID/wire type combinations
                        switch (key.Field)
                        {
                            case 0:
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                            default:
                                global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                                break;
                        }
                    }

                    return instance;
                }

                /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
                public static Textsecure.SessionStructure.Chain.MessageKey DeserializeLengthDelimited(Stream stream, Textsecure.SessionStructure.Chain.MessageKey instance)
                {
                    long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                    limit += stream.Position;
                    while (true)
                    {
                        if (stream.Position >= limit)
                        {
                            if (stream.Position == limit)
                                break;
                            else
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                        }
                        int keyByte = stream.ReadByte();
                        if (keyByte == -1)
                            throw new System.IO.EndOfStreamException();
                        // Optimized reading of known fields with field ID < 16
                        switch (keyByte)
                        {
                            // Field 1 Varint
                            case 8:
                                instance.Index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                                continue;
                            // Field 2 LengthDelimited
                            case 18:
                                instance.CipherKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                            // Field 3 LengthDelimited
                            case 26:
                                instance.MacKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                            // Field 4 LengthDelimited
                            case 34:
                                instance.Iv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                        }

                        var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                        // Reading field ID > 16 and unknown field ID/wire type combinations
                        switch (key.Field)
                        {
                            case 0:
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                            default:
                                global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                                break;
                        }
                    }

                    return instance;
                }

                /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
                public static Textsecure.SessionStructure.Chain.MessageKey DeserializeLength(Stream stream, int length, Textsecure.SessionStructure.Chain.MessageKey instance)
                {
                    long limit = stream.Position + length;
                    while (true)
                    {
                        if (stream.Position >= limit)
                        {
                            if (stream.Position == limit)
                                break;
                            else
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                        }
                        int keyByte = stream.ReadByte();
                        if (keyByte == -1)
                            throw new System.IO.EndOfStreamException();
                        // Optimized reading of known fields with field ID < 16
                        switch (keyByte)
                        {
                            // Field 1 Varint
                            case 8:
                                instance.Index = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                                continue;
                            // Field 2 LengthDelimited
                            case 18:
                                instance.CipherKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                            // Field 3 LengthDelimited
                            case 26:
                                instance.MacKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                            // Field 4 LengthDelimited
                            case 34:
                                instance.Iv = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                                continue;
                        }

                        var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                        // Reading field ID > 16 and unknown field ID/wire type combinations
                        switch (key.Field)
                        {
                            case 0:
                                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                            default:
                                global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                                break;
                        }
                    }

                    return instance;
                }

                /// <summary>Serialize the instance into the stream</summary>
                public static void Serialize(Stream stream, MessageKey instance)
                {
                    var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                    // Key for field: 1, Varint
                    stream.WriteByte(8);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Index);
                    if (instance.CipherKey != null)
                    {
                        // Key for field: 2, LengthDelimited
                        stream.WriteByte(18);
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.CipherKey);
                    }
                    if (instance.MacKey != null)
                    {
                        // Key for field: 3, LengthDelimited
                        stream.WriteByte(26);
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.MacKey);
                    }
                    if (instance.Iv != null)
                    {
                        // Key for field: 4, LengthDelimited
                        stream.WriteByte(34);
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Iv);
                    }
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
                }

                /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
                public static byte[] SerializeToBytes(MessageKey instance)
                {
                    using (var ms = new MemoryStream())
                    {
                        Serialize(ms, instance);
                        return ms.ToArray();
                    }
                }
                /// <summary>Helper: Serialize with a varint length prefix</summary>
                public static void SerializeLengthDelimited(Stream stream, MessageKey instance)
                {
                    var data = SerializeToBytes(instance);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                    stream.Write(data, 0, data.Length);
                }
            }

        }


        
        public partial class PendingKeyExchange
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PendingKeyExchange Deserialize(Stream stream)
            {
                PendingKeyExchange instance = new PendingKeyExchange();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PendingKeyExchange DeserializeLengthDelimited(Stream stream)
            {
                PendingKeyExchange instance = new PendingKeyExchange();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PendingKeyExchange DeserializeLength(Stream stream, int length)
            {
                PendingKeyExchange instance = new PendingKeyExchange();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static PendingKeyExchange Deserialize(byte[] buffer)
            {
                PendingKeyExchange instance = new PendingKeyExchange();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Textsecure.SessionStructure.PendingKeyExchange Deserialize(byte[] buffer, Textsecure.SessionStructure.PendingKeyExchange instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.PendingKeyExchange Deserialize(Stream stream, Textsecure.SessionStructure.PendingKeyExchange instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.LocalBaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            instance.LocalBaseKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            instance.LocalRatchetKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 5 LengthDelimited
                        case 42:
                            instance.LocalRatchetKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 7 LengthDelimited
                        case 58:
                            instance.LocalIdentityKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 8 LengthDelimited
                        case 66:
                            instance.LocalIdentityKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.PendingKeyExchange DeserializeLengthDelimited(Stream stream, Textsecure.SessionStructure.PendingKeyExchange instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.LocalBaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            instance.LocalBaseKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            instance.LocalRatchetKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 5 LengthDelimited
                        case 42:
                            instance.LocalRatchetKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 7 LengthDelimited
                        case 58:
                            instance.LocalIdentityKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 8 LengthDelimited
                        case 66:
                            instance.LocalIdentityKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.PendingKeyExchange DeserializeLength(Stream stream, int length, Textsecure.SessionStructure.PendingKeyExchange instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Sequence = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.LocalBaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 3 LengthDelimited
                        case 26:
                            instance.LocalBaseKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 4 LengthDelimited
                        case 34:
                            instance.LocalRatchetKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 5 LengthDelimited
                        case 42:
                            instance.LocalRatchetKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 7 LengthDelimited
                        case 58:
                            instance.LocalIdentityKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 8 LengthDelimited
                        case 66:
                            instance.LocalIdentityKeyPrivate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, PendingKeyExchange instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Sequence);
                if (instance.LocalBaseKey != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.LocalBaseKey);
                }
                if (instance.LocalBaseKeyPrivate != null)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.LocalBaseKeyPrivate);
                }
                if (instance.LocalRatchetKey != null)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.LocalRatchetKey);
                }
                if (instance.LocalRatchetKeyPrivate != null)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.LocalRatchetKeyPrivate);
                }
                if (instance.LocalIdentityKey != null)
                {
                    // Key for field: 7, LengthDelimited
                    stream.WriteByte(58);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.LocalIdentityKey);
                }
                if (instance.LocalIdentityKeyPrivate != null)
                {
                    // Key for field: 8, LengthDelimited
                    stream.WriteByte(66);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.LocalIdentityKeyPrivate);
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(PendingKeyExchange instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, PendingKeyExchange instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        
        public partial class PendingPreKey
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PendingPreKey Deserialize(Stream stream)
            {
                PendingPreKey instance = new PendingPreKey();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PendingPreKey DeserializeLengthDelimited(Stream stream)
            {
                PendingPreKey instance = new PendingPreKey();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static PendingPreKey DeserializeLength(Stream stream, int length)
            {
                PendingPreKey instance = new PendingPreKey();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static PendingPreKey Deserialize(byte[] buffer)
            {
                PendingPreKey instance = new PendingPreKey();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Textsecure.SessionStructure.PendingPreKey Deserialize(byte[] buffer, Textsecure.SessionStructure.PendingPreKey instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.PendingPreKey Deserialize(Stream stream, Textsecure.SessionStructure.PendingPreKey instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.PreKeyId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.SignedPreKeyId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.BaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.PendingPreKey DeserializeLengthDelimited(Stream stream, Textsecure.SessionStructure.PendingPreKey instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.PreKeyId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.SignedPreKeyId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.BaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SessionStructure.PendingPreKey DeserializeLength(Stream stream, int length, Textsecure.SessionStructure.PendingPreKey instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.PreKeyId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.SignedPreKeyId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.BaseKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, PendingPreKey instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PreKeyId);
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SignedPreKeyId);
                if (instance.BaseKey != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.BaseKey);
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(PendingPreKey instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, PendingPreKey instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }

    }

    
    public partial class RecordStructure
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RecordStructure Deserialize(Stream stream)
        {
            RecordStructure instance = new RecordStructure();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RecordStructure DeserializeLengthDelimited(Stream stream)
        {
            RecordStructure instance = new RecordStructure();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RecordStructure DeserializeLength(Stream stream, int length)
        {
            RecordStructure instance = new RecordStructure();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static RecordStructure Deserialize(byte[] buffer)
        {
            RecordStructure instance = new RecordStructure();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Textsecure.RecordStructure Deserialize(byte[] buffer, Textsecure.RecordStructure instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Textsecure.RecordStructure Deserialize(Stream stream, Textsecure.RecordStructure instance)
        {
            if (instance.PreviousSessions == null)
                instance.PreviousSessions = new List<Textsecure.SessionStructure>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.CurrentSession == null)
                            instance.CurrentSession = Textsecure.SessionStructure.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.DeserializeLengthDelimited(stream, instance.CurrentSession);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.PreviousSessions.Add(Textsecure.SessionStructure.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.RecordStructure DeserializeLengthDelimited(Stream stream, Textsecure.RecordStructure instance)
        {
            if (instance.PreviousSessions == null)
                instance.PreviousSessions = new List<Textsecure.SessionStructure>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.CurrentSession == null)
                            instance.CurrentSession = Textsecure.SessionStructure.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.DeserializeLengthDelimited(stream, instance.CurrentSession);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.PreviousSessions.Add(Textsecure.SessionStructure.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.RecordStructure DeserializeLength(Stream stream, int length, Textsecure.RecordStructure instance)
        {
            if (instance.PreviousSessions == null)
                instance.PreviousSessions = new List<Textsecure.SessionStructure>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.CurrentSession == null)
                            instance.CurrentSession = Textsecure.SessionStructure.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SessionStructure.DeserializeLengthDelimited(stream, instance.CurrentSession);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        instance.PreviousSessions.Add(Textsecure.SessionStructure.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, RecordStructure instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.CurrentSession != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                Textsecure.SessionStructure.Serialize(msField, instance.CurrentSession);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                //stream.Write(msField.GetBuffer(), 0, (int)length1);
				msField.CopyTo(stream, (int)length1);

			}
            if (instance.PreviousSessions != null)
            {
                foreach (var i2 in instance.PreviousSessions)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    Textsecure.SessionStructure.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
					//stream.Write(msField.GetBuffer(), 0, (int)length2);
					msField.CopyTo(stream, (int)length2);

				}
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(RecordStructure instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, RecordStructure instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    
    public partial class PreKeyRecordStructure
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PreKeyRecordStructure Deserialize(Stream stream)
        {
            PreKeyRecordStructure instance = new PreKeyRecordStructure();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PreKeyRecordStructure DeserializeLengthDelimited(Stream stream)
        {
            PreKeyRecordStructure instance = new PreKeyRecordStructure();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PreKeyRecordStructure DeserializeLength(Stream stream, int length)
        {
            PreKeyRecordStructure instance = new PreKeyRecordStructure();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PreKeyRecordStructure Deserialize(byte[] buffer)
        {
            PreKeyRecordStructure instance = new PreKeyRecordStructure();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Textsecure.PreKeyRecordStructure Deserialize(byte[] buffer, Textsecure.PreKeyRecordStructure instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Textsecure.PreKeyRecordStructure Deserialize(Stream stream, Textsecure.PreKeyRecordStructure instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.PreKeyRecordStructure DeserializeLengthDelimited(Stream stream, Textsecure.PreKeyRecordStructure instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.PreKeyRecordStructure DeserializeLength(Stream stream, int length, Textsecure.PreKeyRecordStructure instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PreKeyRecordStructure instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            if (instance.PublicKey != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.PublicKey);
            }
            if (instance.PrivateKey != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.PrivateKey);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PreKeyRecordStructure instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PreKeyRecordStructure instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    
    public partial class SignedPreKeyRecordStructure
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SignedPreKeyRecordStructure Deserialize(Stream stream)
        {
            SignedPreKeyRecordStructure instance = new SignedPreKeyRecordStructure();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SignedPreKeyRecordStructure DeserializeLengthDelimited(Stream stream)
        {
            SignedPreKeyRecordStructure instance = new SignedPreKeyRecordStructure();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SignedPreKeyRecordStructure DeserializeLength(Stream stream, int length)
        {
            SignedPreKeyRecordStructure instance = new SignedPreKeyRecordStructure();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SignedPreKeyRecordStructure Deserialize(byte[] buffer)
        {
            SignedPreKeyRecordStructure instance = new SignedPreKeyRecordStructure();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Textsecure.SignedPreKeyRecordStructure Deserialize(byte[] buffer, Textsecure.SignedPreKeyRecordStructure instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Textsecure.SignedPreKeyRecordStructure Deserialize(Stream stream, Textsecure.SignedPreKeyRecordStructure instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Signature = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 5 Fixed64
                    case 41:
                        instance.Timestamp = br.ReadUInt64();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SignedPreKeyRecordStructure DeserializeLengthDelimited(Stream stream, Textsecure.SignedPreKeyRecordStructure instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Signature = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 5 Fixed64
                    case 41:
                        instance.Timestamp = br.ReadUInt64();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SignedPreKeyRecordStructure DeserializeLength(Stream stream, int length, Textsecure.SignedPreKeyRecordStructure instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.Signature = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 5 Fixed64
                    case 41:
                        instance.Timestamp = br.ReadUInt64();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SignedPreKeyRecordStructure instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Id);
            if (instance.PublicKey != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.PublicKey);
            }
            if (instance.PrivateKey != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.PrivateKey);
            }
            if (instance.Signature != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Signature);
            }
            // Key for field: 5, Fixed64
            stream.WriteByte(41);
            bw.Write(instance.Timestamp);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SignedPreKeyRecordStructure instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SignedPreKeyRecordStructure instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    
    public partial class IdentityKeyPairStructure
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static IdentityKeyPairStructure Deserialize(Stream stream)
        {
            IdentityKeyPairStructure instance = new IdentityKeyPairStructure();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static IdentityKeyPairStructure DeserializeLengthDelimited(Stream stream)
        {
            IdentityKeyPairStructure instance = new IdentityKeyPairStructure();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static IdentityKeyPairStructure DeserializeLength(Stream stream, int length)
        {
            IdentityKeyPairStructure instance = new IdentityKeyPairStructure();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static IdentityKeyPairStructure Deserialize(byte[] buffer)
        {
            IdentityKeyPairStructure instance = new IdentityKeyPairStructure();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Textsecure.IdentityKeyPairStructure Deserialize(byte[] buffer, Textsecure.IdentityKeyPairStructure instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Textsecure.IdentityKeyPairStructure Deserialize(Stream stream, Textsecure.IdentityKeyPairStructure instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.IdentityKeyPairStructure DeserializeLengthDelimited(Stream stream, Textsecure.IdentityKeyPairStructure instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.IdentityKeyPairStructure DeserializeLength(Stream stream, int length, Textsecure.IdentityKeyPairStructure instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.PublicKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.PrivateKey = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, IdentityKeyPairStructure instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.PublicKey != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.PublicKey);
            }
            if (instance.PrivateKey != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.PrivateKey);
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(IdentityKeyPairStructure instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, IdentityKeyPairStructure instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    
    public partial class SenderKeyStateStructure
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SenderKeyStateStructure Deserialize(Stream stream)
        {
            SenderKeyStateStructure instance = new SenderKeyStateStructure();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SenderKeyStateStructure DeserializeLengthDelimited(Stream stream)
        {
            SenderKeyStateStructure instance = new SenderKeyStateStructure();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SenderKeyStateStructure DeserializeLength(Stream stream, int length)
        {
            SenderKeyStateStructure instance = new SenderKeyStateStructure();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SenderKeyStateStructure Deserialize(byte[] buffer)
        {
            SenderKeyStateStructure instance = new SenderKeyStateStructure();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Textsecure.SenderKeyStateStructure Deserialize(byte[] buffer, Textsecure.SenderKeyStateStructure instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Textsecure.SenderKeyStateStructure Deserialize(Stream stream, Textsecure.SenderKeyStateStructure instance)
        {
            if (instance.SenderMessageKeys == null)
                instance.SenderMessageKeys = new List<Textsecure.SenderKeyStateStructure.SenderMessageKey>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SenderKeyId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.SenderChainKeyField == null)
                            instance.SenderChainKeyField = Textsecure.SenderKeyStateStructure.SenderChainKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SenderKeyStateStructure.SenderChainKey.DeserializeLengthDelimited(stream, instance.SenderChainKeyField);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.SenderSigningKeyField == null)
                            instance.SenderSigningKeyField = Textsecure.SenderKeyStateStructure.SenderSigningKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SenderKeyStateStructure.SenderSigningKey.DeserializeLengthDelimited(stream, instance.SenderSigningKeyField);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.SenderMessageKeys.Add(Textsecure.SenderKeyStateStructure.SenderMessageKey.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SenderKeyStateStructure DeserializeLengthDelimited(Stream stream, Textsecure.SenderKeyStateStructure instance)
        {
            if (instance.SenderMessageKeys == null)
                instance.SenderMessageKeys = new List<Textsecure.SenderKeyStateStructure.SenderMessageKey>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SenderKeyId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.SenderChainKeyField == null)
                            instance.SenderChainKeyField = Textsecure.SenderKeyStateStructure.SenderChainKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SenderKeyStateStructure.SenderChainKey.DeserializeLengthDelimited(stream, instance.SenderChainKeyField);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.SenderSigningKeyField == null)
                            instance.SenderSigningKeyField = Textsecure.SenderKeyStateStructure.SenderSigningKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SenderKeyStateStructure.SenderSigningKey.DeserializeLengthDelimited(stream, instance.SenderSigningKeyField);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.SenderMessageKeys.Add(Textsecure.SenderKeyStateStructure.SenderMessageKey.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SenderKeyStateStructure DeserializeLength(Stream stream, int length, Textsecure.SenderKeyStateStructure instance)
        {
            if (instance.SenderMessageKeys == null)
                instance.SenderMessageKeys = new List<Textsecure.SenderKeyStateStructure.SenderMessageKey>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SenderKeyId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.SenderChainKeyField == null)
                            instance.SenderChainKeyField = Textsecure.SenderKeyStateStructure.SenderChainKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SenderKeyStateStructure.SenderChainKey.DeserializeLengthDelimited(stream, instance.SenderChainKeyField);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.SenderSigningKeyField == null)
                            instance.SenderSigningKeyField = Textsecure.SenderKeyStateStructure.SenderSigningKey.DeserializeLengthDelimited(stream);
                        else
                            Textsecure.SenderKeyStateStructure.SenderSigningKey.DeserializeLengthDelimited(stream, instance.SenderSigningKeyField);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        instance.SenderMessageKeys.Add(Textsecure.SenderKeyStateStructure.SenderMessageKey.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SenderKeyStateStructure instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SenderKeyId);
            if (instance.SenderChainKeyField != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                Textsecure.SenderKeyStateStructure.SenderChainKey.Serialize(msField, instance.SenderChainKeyField);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
				//stream.Write(msField.GetBuffer(), 0, (int)length2);
				msField.CopyTo(stream, (int)length2);

			}
            if (instance.SenderSigningKeyField != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                Textsecure.SenderKeyStateStructure.SenderSigningKey.Serialize(msField, instance.SenderSigningKeyField);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
				//stream.Write(msField.GetBuffer(), 0, (int)length3);
				msField.CopyTo(stream, (int)length3);

			}
            if (instance.SenderMessageKeys != null)
            {
                foreach (var i4 in instance.SenderMessageKeys)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    ﻿msField.SetLength(0);
                    Textsecure.SenderKeyStateStructure.SenderMessageKey.Serialize(msField, i4);
                    // Length delimited byte array
                    uint length4 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
					//stream.Write(msField.GetBuffer(), 0, (int)length4);
					msField.CopyTo(stream, (int)length4);

				}
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SenderKeyStateStructure instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SenderKeyStateStructure instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        
        public partial class SenderChainKey
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderChainKey Deserialize(Stream stream)
            {
                SenderChainKey instance = new SenderChainKey();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderChainKey DeserializeLengthDelimited(Stream stream)
            {
                SenderChainKey instance = new SenderChainKey();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderChainKey DeserializeLength(Stream stream, int length)
            {
                SenderChainKey instance = new SenderChainKey();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static SenderChainKey Deserialize(byte[] buffer)
            {
                SenderChainKey instance = new SenderChainKey();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Textsecure.SenderKeyStateStructure.SenderChainKey Deserialize(byte[] buffer, Textsecure.SenderKeyStateStructure.SenderChainKey instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderChainKey Deserialize(Stream stream, Textsecure.SenderKeyStateStructure.SenderChainKey instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Iteration = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Seed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderChainKey DeserializeLengthDelimited(Stream stream, Textsecure.SenderKeyStateStructure.SenderChainKey instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Iteration = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Seed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderChainKey DeserializeLength(Stream stream, int length, Textsecure.SenderKeyStateStructure.SenderChainKey instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Iteration = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Seed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, SenderChainKey instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Iteration);
                if (instance.Seed != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Seed);
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(SenderChainKey instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, SenderChainKey instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        
        public partial class SenderMessageKey
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderMessageKey Deserialize(Stream stream)
            {
                SenderMessageKey instance = new SenderMessageKey();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderMessageKey DeserializeLengthDelimited(Stream stream)
            {
                SenderMessageKey instance = new SenderMessageKey();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderMessageKey DeserializeLength(Stream stream, int length)
            {
                SenderMessageKey instance = new SenderMessageKey();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static SenderMessageKey Deserialize(byte[] buffer)
            {
                SenderMessageKey instance = new SenderMessageKey();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Textsecure.SenderKeyStateStructure.SenderMessageKey Deserialize(byte[] buffer, Textsecure.SenderKeyStateStructure.SenderMessageKey instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderMessageKey Deserialize(Stream stream, Textsecure.SenderKeyStateStructure.SenderMessageKey instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Iteration = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Seed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderMessageKey DeserializeLengthDelimited(Stream stream, Textsecure.SenderKeyStateStructure.SenderMessageKey instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Iteration = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Seed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderMessageKey DeserializeLength(Stream stream, int length, Textsecure.SenderKeyStateStructure.SenderMessageKey instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Iteration = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Seed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, SenderMessageKey instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Iteration);
                if (instance.Seed != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Seed);
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(SenderMessageKey instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, SenderMessageKey instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        
        public partial class SenderSigningKey
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderSigningKey Deserialize(Stream stream)
            {
                SenderSigningKey instance = new SenderSigningKey();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderSigningKey DeserializeLengthDelimited(Stream stream)
            {
                SenderSigningKey instance = new SenderSigningKey();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static SenderSigningKey DeserializeLength(Stream stream, int length)
            {
                SenderSigningKey instance = new SenderSigningKey();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static SenderSigningKey Deserialize(byte[] buffer)
            {
                SenderSigningKey instance = new SenderSigningKey();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Textsecure.SenderKeyStateStructure.SenderSigningKey Deserialize(byte[] buffer, Textsecure.SenderKeyStateStructure.SenderSigningKey instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderSigningKey Deserialize(Stream stream, Textsecure.SenderKeyStateStructure.SenderSigningKey instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Public = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Private = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderSigningKey DeserializeLengthDelimited(Stream stream, Textsecure.SenderKeyStateStructure.SenderSigningKey instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Public = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Private = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Textsecure.SenderKeyStateStructure.SenderSigningKey DeserializeLength(Stream stream, int length, Textsecure.SenderKeyStateStructure.SenderSigningKey instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            instance.Public = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.Private = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, SenderSigningKey instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                if (instance.Public != null)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Public);
                }
                if (instance.Private != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.Private);
                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(SenderSigningKey instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, SenderSigningKey instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }

    }

    
    public partial class SenderKeyRecordStructure
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SenderKeyRecordStructure Deserialize(Stream stream)
        {
            SenderKeyRecordStructure instance = new SenderKeyRecordStructure();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SenderKeyRecordStructure DeserializeLengthDelimited(Stream stream)
        {
            SenderKeyRecordStructure instance = new SenderKeyRecordStructure();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SenderKeyRecordStructure DeserializeLength(Stream stream, int length)
        {
            SenderKeyRecordStructure instance = new SenderKeyRecordStructure();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SenderKeyRecordStructure Deserialize(byte[] buffer)
        {
            SenderKeyRecordStructure instance = new SenderKeyRecordStructure();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Textsecure.SenderKeyRecordStructure Deserialize(byte[] buffer, Textsecure.SenderKeyRecordStructure instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Textsecure.SenderKeyRecordStructure Deserialize(Stream stream, Textsecure.SenderKeyRecordStructure instance)
        {
            if (instance.SenderKeyStates == null)
                instance.SenderKeyStates = new List<Textsecure.SenderKeyStateStructure>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.SenderKeyStates.Add(Textsecure.SenderKeyStateStructure.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SenderKeyRecordStructure DeserializeLengthDelimited(Stream stream, Textsecure.SenderKeyRecordStructure instance)
        {
            if (instance.SenderKeyStates == null)
                instance.SenderKeyStates = new List<Textsecure.SenderKeyStateStructure>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.SenderKeyStates.Add(Textsecure.SenderKeyStateStructure.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Textsecure.SenderKeyRecordStructure DeserializeLength(Stream stream, int length, Textsecure.SenderKeyRecordStructure instance)
        {
            if (instance.SenderKeyStates == null)
                instance.SenderKeyStates = new List<Textsecure.SenderKeyStateStructure>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.SenderKeyStates.Add(Textsecure.SenderKeyStateStructure.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SenderKeyRecordStructure instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.SenderKeyStates != null)
            {
                foreach (var i1 in instance.SenderKeyStates)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    Textsecure.SenderKeyStateStructure.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
					//stream.Write(msField.GetBuffer(), 0, (int)length1);
					msField.CopyTo(stream, (int)length1);

				}
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SenderKeyRecordStructure instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SenderKeyRecordStructure instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}
